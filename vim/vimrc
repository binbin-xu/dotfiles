"------------------
" Vundle.vim settings
"------------------
set nocompatible              " be iMproved, required
filetype off                  " required
let g:has_async = v:version >= 800 || has('nvim')

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/nerdtree'
"Plug 'kien/ctrlp.vim'
Plug 'Yggdroot/LeaderF'
Plug 'mileszs/ack.vim'
Plug 'majutsushi/tagbar'
Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-airline/vim-airline'
"Plug 'easymotion/vim-easymotion'
Plug 'sjl/gundo.vim'
"Plug 'scrooloose/syntastic'
if g:has_async
  Plug 'dense-analysis/ale'
endif
Plug 'SirVer/ultisnips'    " snippets engine.
Plug 'honza/vim-snippets'   " Snippets templates
Plug 'valloric/youcompleteme'
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
Plug 'scrooloose/nerdcommenter'
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-unimpaired'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'kshenoy/vim-signature'

" Initialize plugin system
call plug#end()
"
" Brief help
" :PlugStatus     - lists configured plugins
" :PlugInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PlugClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"


"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" colorscheme
set background=dark
" vim can autodetect this based on $TERM (e.g. 'xterm-256color')
" but it can be set to force 256 colors
" set t_Co=256
if has('gui_running')
    silent! colorscheme solarized
    let g:lightline = {'colorscheme': 'solarized'}
elseif &t_Co < 256
    colorscheme default
    set nocursorline " looks bad in this mode
else
    set background=dark
    let g:solarized_termcolors=256 " instead of 16 color with mapping in terminal
    silent! colorscheme solarized
    " customized colors
    highlight SignColumn ctermbg=234
    highlight StatusLine cterm=bold ctermfg=245 ctermbg=235
    highlight StatusLineNC cterm=bold ctermfg=245 ctermbg=235
    let g:lightline = {'colorscheme': 'dark'}
    highlight SpellBad cterm=underline
endif

set autoindent


"---------------------
" Basic editing config
"---------------------

" Highlight dynamically as pattern is typed
set showmatch
set smartcase
set smartindent
set whichwrap=b,s,h,l,<,>,[,]
set nowrapscan
set infercase
set virtualedit=all
set matchpairs& matchpairs+=<:>

" Show line numbers.
set number

 " This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go down.
set relativenumber


 " Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" clipboard
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
else
  set clipboard=unnamed
endif

" avoid indentation when pasting from systm clipboard, F2 to toggle in/out
nnoremap <F2> :set invpaste paste? <CR>
set pastetoggle=<F2>
set showmode

" Enhance command-line completion
set wildmenu
set wildignore+=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*/*.dSYM/*,*.dylib,*.so,*.swp,*.zip,*.tgz,*.gz
set wildmode=list,full
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2                                               
endif

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
  set wildignore+=.git\*,.hg\*,.svn\*
endif

" Allow cursor keys in insert mode
" set esckeys

" Optimize for fast terminal connections
if has('nvim')
  set ttyfast
endif

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Don’t add empty newlines at the end of files
set binary
set noeol

set backspace=indent,eol,start  " Allow backspace in insert mode

" Don't continue to highlight searched phrases.
set nohlsearch
set incsearch " incremental search (as string is being typed)
" set hls " highlight search

" use 4 spaces instead of tabs during formatting
set expandtab
set tabstop=4
set shiftwidth=4          " indent/outdent by 4 columns
set softtabstop=4         " unify
set shiftround    " indent/outdent by 4 columns
set iminsert=0

" PEP 8 indentation
autocmd BufRead,BufNewFile *.py let python_highlight_all=1
" au BufNewFile,BufRead *.h, *.C++
"   \ set tabstop=4
"   \ set softtabstop=4
"   \ set shiftwidth=4
"   \ set textwidth=79


au BufNewFile,BufRead *.h,*.C++
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=79

" wrap for long line
set wrap


" Respect modeline in files
set modeline
set modelines=4

" No annoying sound on errors
set noerrorbells visualbell t_vb=    "Disable annoying error noises
set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts

" Don’t reset cursor to start of line when moving around.
set nostartofline
set modifiable
if !has('nvim')
  set ttymouse=xterm2
endif

" Enable mouse in all modes
if has('mouse')
  set mouse+=a
endif

" Ignore case of searches
set ignorecase

" Show the cursor position
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set history=8192 " more history
set commentstring=\ #\ %s
set browsedir=buffer
set hidden


" Undo
if !isdirectory($HOME."/.vim_undodir")
    call mkdir($HOME."/.vim_undodir", "", 0700)
endif
set undodir=~/.vim_undodir
set undofile


" A buffer becomes hidden when it is abandoned
set hidden " allow auto-hiding of edited buffers
" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase


" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

let skip_defaults_vim=1                      



"---------------------
" Leader Shortcuts
"---------------------
let mapleader=" "       " leader is space

" Edit in same directory as current file
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>

" Edit in horizontal split view
map <leader>eh :sp <C-R>=expand("%:p:h") . "/" <CR>

" Edit in vertical split view
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>

" Edit in new tab
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>



"---------------------
" Plugin configuration
"---------------------
" nerdtree
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>

" tagbar
nnoremap <Leader>t :TagbarToggle<CR>

" gutentags 
" C-]: open in the buffer; C-W + ]: open in new window; C-W+}: preview
" set gutentags project root ( when meeting the following folder)
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" move auto-generated tags files into ~/.vimcache/tags 
let s:vim_tags = expand('~/.vimcache/tags')
let g:gutentags_cache_dir = s:vim_tags
" set ctags parameters
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" create ~/.cache/tags if not existing 
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" vim-signify
" default updatetime 4000ms is not good for async update
set updatetime=100

" nerd-ccommenter
" leader+c+space: toggle | leader+cc: comment | leader+cu: uncomment
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" " Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" " Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" ale
let g:ale_linters = { 'cpp': ['cppchec', 'g++'], 'c': ['gcc'], 'python': ['pylint', 'flake8'], 'sh': ['shellcheck']}
let g:ale_fixers = {'python': ['autopep8', 'yapf']}
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '?'
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>
nmap <Leader>a :ALEDetail<CR>


" autoformat
" remap <leader>f :Autoformat<CR>
noremap <leader>f :Autoformat<CR>
"
" " ctrlp
" nnoremap ; :CtrlPBuffer<CR>
" let g:ctrlp_switch_buffer = 0
" let g:ctrlp_show_hidden = 1

" use LeaderF to replace ctrlp
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<c-b>'
noremap <c-n> :LeaderfMru<cr>
noremap <c-f> :LeaderfFunction!<cr>
noremap <c-b> :LeaderfBuffer<cr>
"noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vimcache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_ShowDevIcons = 0   " diable icon to avoid installing nerdfonts

" easymotion
"map <Space> <Plug>(easymotion-prefix)
"map ss <Plug>(easymotion-s2)

" air-line
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif                                       
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" gundo
nnoremap <Leader>u :GundoToggle<CR>
if has('python3')
    let g:gundo_prefer_python3 = 1
endif


" ultisnips
" YouCompleteMe and UltiSnips compatibility.
let g:ycm_use_ultisnips_completer = 1
" use tab and S-tab to select completion, 
" and <c-j> to activate snippets copletion
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'                                       
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
" jump to declaration/definition
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Additional YouCompleteMe config.
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
nnoremap <Leader>es :UltiSnipsEdit<CR>

" to support new filetype
autocmd BufRead,BufNewFile *.envrc setfiletype envrc
"--------------------
" Misc configurations
"--------------------

" unbind keys
map <C-a> <Nop>
map <C-x> <Nop>

 " Try to prevent bad habits like using the arrow keys for movement. 
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" quicker (vim-way) window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" save read-only files
command -nargs=0 Sudow w !sudo tee % >/dev/null
